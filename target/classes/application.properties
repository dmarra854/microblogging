spring.application.name=project
server.port=9090
# H2 Database configuration to save data to a file
# spring.datasource.url=jdbc:h2:file:./data/microblogdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password

# Enable H2 console for debugging (optional, but useful)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#spring.datasource.driverClassName=org.h2.Driver

# JPA / Hibernate
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# This property ensures data.sql runs AFTER schema.sql (if schema.sql exists)
# and after JPA schema generation, if you use hibernate.ddl-auto
#spring.jpa.defer-datasource-initialization=true

# Redis
spring.redis.host=localhost
spring.redis.port=6379
spring.data.redis.repositories.enabled=false
# Logging level (opcional)
#logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092


spring.kafka.admin.auto-create=true
spring.kafka.admin.fail-fast=false
spring.kafka.admin.properties.request.timeout.ms=30000

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=true
spring.kafka.producer.properties.spring.json.trusted.packages=com.microblogging.project.domain.event
spring.kafka.producer.properties.enable.idempotence=true

# 1. Database Connection (Example for H2 in-memory)
spring.datasource.url=jdbc:h2:mem:microblogdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# 2. JPA/Hibernate DDL (Schema Management)
# Options:
#   - none: Hibernate will not manage the schema. Rely fully on schema.sql or external tools.
#   - create: Drops existing schema, then creates new schema. (DANGER for production!)
#   - create-drop: Same as create, but drops schema when application closes. (Good for tests)
#   - update: Updates schema based on entity changes. (Use with caution in production)
#   - validate: Validates that the schema matches entities, throws error if mismatch.
spring.jpa.hibernate.ddl-auto=create

# 3. SQL Script Initialization Mode (Crucial for data.sql)
# Options:
#   - embedded (default): Scripts run only for embedded databases (H2, HSQLDB, Derby).
#   - always: Scripts always run, regardless of database type. Use this for external DBs.
#   - never: Scripts never run.
spring.sql.init.mode=always

# 4. Defer Data Source Initialization (Crucial for order with Hibernate DDL)
# Available since Spring Boot 2.5+.
# This ensures that schema.sql and data.sql run *after* the JPA EntityManagerFactory
# (and thus Hibernate's ddl-auto) has been initialized and potentially created the schema.
spring.jpa.defer-datasource-initialization=true

# 5. Logging (Highly Recommended for Debugging)
# Set to DEBUG to see Spring log when it executes the SQL scripts.
logging.level.org.springframework.jdbc.datasource.init=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=TRACE

